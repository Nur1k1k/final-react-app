{"ast":null,"code":"// Импортируем редуктор handleCart, который будет отвечать за обработку состояния корзины.\nimport handleCart from \"./handleCart\";\n\n// Импортируем функцию combineReducers из библиотеки Redux, которая объединяет различные редукторы в один корневой редуктор.\nimport { combineReducers } from \"redux\";\n\n// Создаем корневые редукторы (rootReducers) с помощью функции combineReducers, передавая ей объект, в котором каждое свойство соответствует отдельному редуктору.\nconst rootReducers = combineReducers({\n  handleCart // Привязываем редуктор handleCart к ключу с именем handleCart в корневых редукторах.\n});\n\n// Экспортируем созданные корневые редукторы, чтобы они могли быть использованы в создании хранилища.\nexport default rootReducers;","map":{"version":3,"names":["handleCart","combineReducers","rootReducers"],"sources":["C:/Users/dauye/Desktop/final-project/react-app-buysell/src/redux/reducers/index.js"],"sourcesContent":["// Импортируем редуктор handleCart, который будет отвечать за обработку состояния корзины.\r\nimport handleCart from \"./handleCart\";\r\n\r\n// Импортируем функцию combineReducers из библиотеки Redux, которая объединяет различные редукторы в один корневой редуктор.\r\nimport { combineReducers } from \"redux\";\r\n\r\n// Создаем корневые редукторы (rootReducers) с помощью функции combineReducers, передавая ей объект, в котором каждое свойство соответствует отдельному редуктору.\r\nconst rootReducers = combineReducers({\r\n  handleCart, // Привязываем редуктор handleCart к ключу с именем handleCart в корневых редукторах.\r\n});\r\n\r\n// Экспортируем созданные корневые редукторы, чтобы они могли быть использованы в создании хранилища.\r\nexport default rootReducers;\r\n"],"mappings":"AAAA;AACA,OAAOA,UAAU,MAAM,cAAc;;AAErC;AACA,SAASC,eAAe,QAAQ,OAAO;;AAEvC;AACA,MAAMC,YAAY,GAAGD,eAAe,CAAC;EACnCD,UAAU,CAAE;AACd,CAAC,CAAC;;AAEF;AACA,eAAeE,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}